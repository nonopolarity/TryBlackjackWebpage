(()=>{"use strict";const e="\n♦\n♣\n♥\n♠\n".trim().split(/\s+/),t="\n2\n3\n4\n5\n6\n7\n8\n9\n10\nJ\nQ\nK\nA\n".trim().split(/\s+/),i="hit",s="stand",a="double down",r={set7toAce:new Set(["7","8","9","10","J","Q","K","A"]),set9toAce:new Set(["9","10","J","Q","K","A"]),set10toAce:new Set(["10","J","Q","K","A"]),set2to3:new Set(["2","3"])},n=1e6,l=1e3,h=3e7;function o(...e){const t=e.map((e=>`${e}`));console.log(...t),"undefined"!=typeof postMessage&&postMessage(t.join(" "))}function u(...e){o(...e),o("\n")}class c{#e=null;#t=null;#i=null;#s=null;constructor({rankNumericZeroBased:i,suit:s}){this.#e=e[s],this.#t=t[i],this.#i=12===i?1:i>=9&&i<=11?10:i+2,this.#s=1!==this.#i?this.#i:11}tellYourself(){}is7toAce(){const e=r.set7toAce.has(this.#t),t=this.#s>=7&&this.#s<=11;if(e!==t)throw o("Error",e,t,JSON.stringify(this.#t),JSON.stringify(this.#i)),"Error";return this.#s>=7&&this.#s<=11}is9toAce(){return this.#s>=9&&this.#s<=11}is10toAce(){return this.#s>=10&&this.#s<=11}is2to9(){return this.#s>=2&&this.#s<=9}is2to6(){return this.#s>=2&&this.#s<=6}is3to6(){return this.#s>=3&&this.#s<=6}is4to6(){return this.#s>=4&&this.#s<=6}is5to6(){return this.#s>=5&&this.#s<=6}isWhatToWhatInclusive(e,t){return this.#s>=e&&this.#s<=t}is2or3(){return this.#s>=2&&this.#s<=3}toString(){return`${this.#e} ${this.#t}`}giveRankNumeric(){return this.#i}}class g{#a=null;#r=null;#n=0;populateUnshuffledCards(e){e??=52;for(let t=0;t<e;t++)this.#a.push(new c({rankNumericZeroBased:t%13,suit:Math.floor(t/13)}))}resetYourselfUnshuffled(){const e=this.#r;this.#a=[],this.populateUnshuffledCards(e),this.#n=0}resetYourselfShuffled(){const e=this.#r;this.#a=[],this.populateUnshuffledCards(e),this.shuffle(),this.#n=0}constructor(e=52){this.#r=e,this.resetYourselfUnshuffled()}shuffle(){for(let e=this.#a.length-1;e>0;e--){const t=Math.floor(Math.random()*(e+1));[this.#a[e],this.#a[t]]=[this.#a[t],this.#a[e]]}}numOfCards(){return this.#a.length}isDeckEmpty(){return 0===this.numOfCards()}tellYourself(){}toString(){return`I am a Deck with ${this.numOfCards()} cards:\n[ ${this.#a.map((e=>e.toString())).join(", ")} ]`}giveOutACard(){const e=this.#a.pop();return e.is9toAce()?this.#n--:e.is2to6()&&this.#n++,e}tellTheCount(){return this.#n}}class d{#a=null;numOfCards(){return this.#a.length}giveCards(){return this.#a}tellYourself(){}constructor(){this.#a=[]}takeThisCard(e){this.#a.push(e)}total(){return this.#a.map((e=>e.giveRankNumeric())).reduce(((e,t)=>e+t),0)}totalSoft(){const e=this.#a.some((e=>1===e.giveRankNumeric())),t=this.total();if(e){const e=t+10;return e>21?t:e}return t}isBlackjack(){return 2===this.numOfCards()&&21===this.totalSoft()}isStrictlySoft17(){return 17===this.totalSoft()&&17!==this.total()}isBust(){return this.total()>21}isNotBust(){return!this.isBust()}hasAnAce(){return this.#a.some((e=>1===e.giveRankNumeric()))}has7(){return this.#a.some((e=>7===e.giveRankNumeric()))}hasExactlyTwoCards(){return 2===this.numOfCards()}isTwoCardsAndOneIsAce(){return 2===this.numOfCards()&&this.hasAnAce()}isAceAnd7(){const e=this.#a[0].giveRankNumeric(),t=this.#a[1].giveRankNumeric();return 2===this.numOfCards()&&(1===e&&7===t||7===e&&1===t)}isAceAnd(e){const t=this.#a[0].giveRankNumeric(),i=this.#a[1].giveRankNumeric();return 2===this.numOfCards()&&(1===t&&i===e||t===e&&1===i)}toString(){return`I am a hand: [ ${this.#a.map((e=>`${e}`)).join(", ")} ] Hard: ${this.total()}, Soft: ${this.totalSoft()}`}}const m=new Map;class v{static betMultiplier(e){let t;t=(e=Math.min(e,1))<=0?1:1e4*e;const i=m.get(t)??0;return m.set(t,i+1),t}static showBetMultiplierTally(){console.log("betMultiplierTally",m)}decide(e,t){if(t.giveRankNumeric(),e.hasExactlyTwoCards()&&e.hasAnAce()){if(e.isAceAnd(7))return t.is3to6()?a:t.is9toAce()?i:s;if(e.isAceAnd(6))return t.is3to6()?a:i;if(e.isAceAnd(5)||e.isAceAnd(4))return t.is4to6()?a:i;if(e.isAceAnd(3)||e.isAceAnd(2))return t.is5to6()?a:i}return e.hasExactlyTwoCards()&&11===e.totalSoft()||e.hasExactlyTwoCards()&&10===e.totalSoft()&&t.is2to9()||e.hasExactlyTwoCards()&&9===e.totalSoft()&&t.is3to6()?a:e.hasExactlyTwoCards()&&e.hasAnAce()&&e.totalSoft()<=17||e.hasExactlyTwoCards()&&e.hasAnAce()&&18===e.totalSoft()&&t.is9toAce()||e.totalSoft()<=11||12===e.totalSoft()&&t.is2or3()||e.totalSoft()<=16&&t.is7toAce()?i:s}}o("Ok, the world is starting\n"),u("Going to play 30000000, or 30 million games of blackjack");let A=performance.now();const k=new class{#l=null;#h=null;#o=null;#u=null;#c=null;#g=null;#d=0;constructor({name:e,asset:t}){this.#o=e,this.#h=t,this.#l=new d,this.#g=new v}resetHand(){this.#l=new d}bet(e){this.#c=e,this.#h-=e,this.#d+=e}doubleDownBet(){this.#h-=this.#c,this.#d+=this.#c,this.#c=2*this.#c}giveWagerTotalSoFar(){return this.#d}takeACard(){this.#l.takeThisCard(this.#u.giveDeck().dealACard())}takeThisCard(e){this.#l.takeThisCard(e)}tellYourHand(){this.#l.tellYourself()}playOneGame(e){this.#u=e,this.#l=new d,this.takeACard(),e.giveDealer().takeACard(),this.takeACard(),e.giveDealer().takeACard(),e.giveDealer().tellYourHand(),this.tellYourHand()}giveName(){return this.#o}giveHand(){return this.#l}giveAssetAmount(){return this.#h}giveWagerAmount(){return this.#c}giveStrategy(){return this.#g}getBackWager(){this.#h+=this.#c,this.#c=null}getBackWagerAndWinning(){this.#h+=this.#c,this.#h+=this.#c,this.#c=null}getBackWagerAndBlackjackWinning(){this.#h+=this.#c,this.#h+=1.5*this.#c,this.#c=null}loseWager(){this.#c=null}toString(){return`I am a Player whose name is ${this.giveName()}, with asset $${this.giveAssetAmount()}, wager $${this.giveWagerAmount()}\nand my hand is: ${this.#l}`}}({asset:l,name:"Sam"}),f=new class{#l=null;#o=null;#u=null;#h=null;constructor({name:e,table:t,asset:i}){this.#o=e,this.#l=new d,this.#u=t,this.#h=i}resetHand(){this.#l=new d}takeACard(){this.#l.takeThisCard(this.#u.giveDeck().dealACard())}takeThisCard(e){this.#l.takeThisCard(e)}tellYourHand(){this.#l.tellYourself()}giveName(){return this.#o}giveHand(){return this.#l}giveUpcard(){const e=this.#l?.giveCards();return e?.[0]}gainWager(e){this.#h+=e}toString(){return`I am a Dealer whose name is ${this.giveName()}, with a hand of: ${this.#l}`}}({name:"Buddha",table:void 0,asset:n});u("PLAYER",k);const y=new class{#m=null;#v=null;#A=null;constructor({player:e,dealer:t}){this.#m=new g,this.#m.shuffle(),this.#v=t,this.#A=e}resetAndShuffleDeck(){this.#m=new g,this.#m.shuffle()}giveDeck(){return this.#m}giveDealer(){return this.#v}givePlayer(){return this.#A}dealACardTo(e){e.takeThisCard(this.giveDeck().giveOutACard())}runOneGame({wager:e}={wager:5}){if(this.givePlayer().bet(e*v.betMultiplier(this.giveDeck().tellTheCount())),this.dealACardTo(this.givePlayer()),this.dealACardTo(this.giveDealer()),this.dealACardTo(this.givePlayer()),this.dealACardTo(this.giveDealer()),this.giveDealer().giveHand().isBlackjack())return this.givePlayer().giveHand().isBlackjack()?void this.givePlayer().getBackWager():void this.givePlayer().loseWager();if(this.givePlayer().giveHand().isBlackjack())return void this.givePlayer().getBackWagerAndBlackjackWinning();let t=this.givePlayer().giveStrategy().decide(this.givePlayer().giveHand(),this.giveDealer().giveUpcard());for(;t===i&&this.givePlayer().giveHand().isNotBust();)this.dealACardTo(this.givePlayer()),t=this.givePlayer().giveStrategy().decide(this.givePlayer().giveHand(),this.giveDealer().giveUpcard());if(t===a&&(this.givePlayer().doubleDownBet(),this.dealACardTo(this.givePlayer())),this.givePlayer().giveHand().isBust())this.givePlayer().loseWager();else{for(;(this.giveDealer().giveHand().totalSoft()<=16||this.giveDealer().giveHand().isStrictlySoft17())&&this.giveDealer().giveHand().isNotBust();)this.dealACardTo(this.giveDealer());if(!this.giveDealer().giveHand().isBust())return this.giveDealer().giveHand().totalSoft()===this.givePlayer().giveHand().totalSoft()?void this.givePlayer().getBackWager():this.giveDealer().giveHand().totalSoft()>this.givePlayer().giveHand().totalSoft()?void this.givePlayer().loseWager():void this.givePlayer().getBackWagerAndWinning();this.givePlayer().getBackWagerAndWinning()}}}({player:k,dealer:f});let w,C=performance.now();for(let e=0;e<h;e++){if(0!==e&&e%n==0&&(w=(l-y.givePlayer().giveAssetAmount())/y.givePlayer().giveWagerTotalSoFar(),o(`played ${e} games, took ${((performance.now()-C)/1e3).toFixed(2)} seconds, ${(e/h*100).toFixed(1)} % done, houseAdvantage: ${100*w} %`),C=performance.now()),y.runOneGame(),null!==y.givePlayer().giveWagerAmount())throw"Wager should be reset to null";y.giveDeck().numOfCards()<26&&y.resetAndShuffleDeck(),y.givePlayer().resetHand(),y.giveDealer().resetHand()}let N=performance.now();o(""),u("After 30000000 games:"),u("Player",y.givePlayer()),y.givePlayer().giveAssetAmount()>=l?u("Winning $"+(y.givePlayer().giveAssetAmount()-l)):u("Losing $"+(l-y.givePlayer().giveAssetAmount())),o("Total wager is $150000000"),u("or $150M"),w=(l-y.givePlayer().giveAssetAmount())/y.givePlayer().giveWagerTotalSoFar(),u(`Using the formula: lose how many / total wager: ${100*w} %   <--- this is the House Advantage`),u(`Using the formula: lose how many / total wager / 2: ${(l-y.givePlayer().giveAssetAmount())/15e7/2*100} %`);const S=(y.givePlayer().giveAssetAmount()-l+15e7)/10;o(`numWinningTimes is ${S}`),u(`numWinningTimes is ${S/h*100} %`),u(`numWinningTimes is ${50-S/h*100} %`),u(`numWinningTimes is ${2*(50-S/h*100)} %`),u(`That means losing $${(l-y.givePlayer().giveAssetAmount())/h} per game`),o(`It took ${(N-A)/1e3} seconds to run`),u(`which is ${(N-A)/1e3/60} minutes to run`),u("For 30 million games"),u(`So it is ${(1/((N-A)/1e3/h)).toFixed(1)} games per second.`),u(`House Advantage: ${100*w} %`),v.showBetMultiplierTally()})();